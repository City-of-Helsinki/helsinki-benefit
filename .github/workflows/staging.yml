name: Build & Staging
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build_required:
        description: "Build images (true/false)"
        required: true
        default: "false"
env:
  CONTAINER_REGISTRY: ghcr.io
  CONTAINER_REGISTRY_USER: ${{ secrets.GHCR_CONTAINER_REGISTRY_USER }}
  CONTAINER_REGISTRY_PASSWORD: ${{ secrets.GHCR_TOKEN }}
  CONTAINER_REGISTRY_REPO: ghcr.io/city-of-helsinki/${{ github.event.repository.name }}
  REPO_NAME: ${{ github.event.repository.name }}
  KUBECONFIG_RAW: ${{ secrets.KUBECONFIG_RAW_STAGING }}
  BUILD_ARTIFACT_FOLDER: "build_artifacts"
  SERVICE_ARTIFACT_FOLDER: "service_artifacts"
  BASE_DOMAIN: ${{ secrets.BASE_DOMAIN_STAGING }}
  K8S_REQUEST_CPU: 50m
  K8S_REQUEST_RAM: 200Mi
  K8S_LIMIT_CPU: 500m
  K8S_LIMIT_RAM: 400Mi
  K8S_REPLICACOUNT: 2
  VAULT_JWT_PRIVATE_KEY: ${{ secrets.VAULT_ACCESS_PRIVATE_KEY_STAGING }}
  VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
  VAULT_KV_VERSION: "2"

jobs:
  build:
    if: github.event_name == 'push' || github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        service: ["backend", "applicant"]
        include:
          - service: backend
            context: ./backend
            dockerfile: ./backend/Dockerfile
            port: 8000
          - service: applicant
            context: ./frontend
            dockerfile: ./frontend/applicant/Dockerfile
            port: 3000
    runs-on: ubuntu-latest
    name: Build
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Build
        if: github.event_name == 'push' || github.event.inputs.build_required == 'true'
        uses: andersinno/kolga-build-action@v2
        env:
          DOCKER_BUILD_SOURCE: ${{ matrix.dockerfile }}
          DOCKER_BUILD_CONTEXT: ${{ matrix.context }}
          DOCKER_IMAGE_NAME: ${{ matrix.service }}
          SERVICE_PORT: ${{ matrix.port }}

  staging:
    if: github.event_name == 'push' || github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        service: ["backend", "applicant"]
        include:
          - service: backend
            context: backend
            dockerfile: ./backend/Dockerfile
            database: true
          - service: applicant
            context: frontend
            dockerfile: ./frontend/applicant/Dockerfile
            database: false
    runs-on: ubuntu-latest
    needs: build
    name: Staging
    steps:
      - uses: actions/checkout@v2
      - uses: andersinno/kolga-setup-action@v2

      - name: Service with ingress
        run: |
          echo "ENVIRONMENT_URL=https://helsinkibenefit-${{ matrix.service }}.${{ env.BASE_DOMAIN }}" >> $GITHUB_ENV
          echo "K8S_SECRET_ALLOWED_HOSTS=*" >> $GITHUB_ENV

      - name: Deploy
        uses: andersinno/kolga-deploy-action@v2
        with:
          track: "staging"
        env:
          DOCKER_BUILD_SOURCE: ${{ matrix.dockerfile }}
          DOCKER_BUILD_CONTEXT: ./${{ matrix.context }}
          DOCKER_IMAGE_NAME: ${{ matrix.service }}
          PROJECT_NAME: ${{ github.event.repository.name }}-${{ matrix.service }}
          K8S_NAMESPACE: ${{ secrets.K8S_NAMESPACE_STAGING }}
          K8S_SECRET_VERSION: ${{ github.sha }}
          VAULT_JWT_AUTH_PATH: ${{ github.event.repository.name }}-${{ matrix.service }}-staging
          VAULT_KV_SECRET_MOUNT_POINT: staging
          APP_MIGRATE_COMMAND: ${{ matrix.database == 'true' && '/app/.prod/on_deploy.sh' || ''}}
      - name: staging deploy failure notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: DeployManager
          SLACK_ICON: https://a.slack-edge.com/80588/img/services/outgoing-webhook_48.png
          SLACK_TITLE: Deploying to ${{ env.ENVIRONMENT_URL }} has *FAILED!*
          SLACK_MESSAGE: Deploying to ${{ env.ENVIRONMENT_URL }} has *FAILED!*
          SLACK_CHANNEL: yjdh-alerts
        if: failure()
  acceptance-tests:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    needs: deploy
    name: Acceptance tests for Staging
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v2
      - name: Service with ingress
        run: |
          echo "APPLICANT_URL=https://applicant.helsinkibenefit.${{ env.BASE_DOMAIN }}" >> $GITHUB_ENV
          echo "HANDLER_URL=https://handler.helsinkibenefit.${{ env.BASE_DOMAIN }}" >> $GITHUB_ENV
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.2
        with:
          node-version: "14"
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn --prefer-offline --frozen-lockfile --check-files --production=false
      - name: Run TestCafe tests For ${{env.ENVIRONMENT_URL}}
        id: testcafe
        run: yarn browser-test:ci
        env:
          GITHUB_WORKFLOW_NAME: ${{  github.workflow }}
          GITHUB_WORKFLOW_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          TESTCAFE_SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          TESTCAFE_SLACK_CHANNEL: "#yjdh-alerts"
          TESTCAFE_SLACK_USERNAME: TestCafé
      - name: Upload results
        run: |
          zip -r report.zip report/ > no_output 2>&1
          curl -s -H "Content-Type: application/zip" -H "Authorization: Bearer ${{secrets.NETLIFY_AUTH_TOKEN}}" --data-binary "@report.zip" https://api.netlify.com/api/v1/sites > response.json
          echo "REPORT_URL=$(cat response.json|python -c "import sys, json; print('https://' + json.load(sys.stdin)['subdomain'] + '.netlify.com')")" >> $GITHUB_ENV
        if: always() && steps.testcafe.outcome == 'failure'
      - name: link screenshots url to slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_USERNAME: TestCafé
          SLACK_TITLE: ${{ github.workflow }} have *FAILED*!
          SLACK_MESSAGE: "*Check the testcafe report here for ${{ env.ENVIRONMENT_URL }}: ${{env.REPORT_URL}}*"
          SLACK_CHANNEL: yjdh-alerts
        if: always() && steps.testcafe.outcome == 'failure'
      - name: Upload screenshots and videos of failed tests to artifact for ${{env.APPLICANT_URL}}
        uses: actions/upload-artifact@v2
        with:
          name: report
          path: report/
        if: always() && steps.testcafe.outcome == 'failure'
